'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var asyncCacheDedupe = require('async-cache-dedupe');

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}

var defaultCacheMethods = ["findUnique", "findFirst", "findMany", "count", "aggregate", "groupBy", "findRaw", "aggregateRaw"];
var defaultMutationMethods = ["create", "createMany", "update", "updateMany", "upsert", "delete", "deleteMany", "executeRawUnsafe"];

var DEFAULT_CACHE_TIME = 0;
var createPrismaRedisCache = function createPrismaRedisCache(_ref) {
  var models = _ref.models,
    onDedupe = _ref.onDedupe,
    onError = _ref.onError,
    onHit = _ref.onHit,
    onMiss = _ref.onMiss,
    storage = _ref.storage,
    _ref$cacheTime = _ref.cacheTime,
    cacheTime = _ref$cacheTime === void 0 ? DEFAULT_CACHE_TIME : _ref$cacheTime,
    _ref$excludeModels = _ref.excludeModels,
    excludeModels = _ref$excludeModels === void 0 ? [] : _ref$excludeModels,
    _ref$excludeMethods = _ref.excludeMethods,
    excludeMethods = _ref$excludeMethods === void 0 ? [] : _ref$excludeMethods,
    transformer = _ref.transformer;
  // Default options for "async-cache-dedupe"
  var cacheOptions = {
    onDedupe: onDedupe,
    onError: onError,
    onHit: onHit,
    onMiss: onMiss,
    storage: storage,
    ttl: cacheTime,
    transformer: transformer
  };
  var cache = asyncCacheDedupe.createCache(cacheOptions);
  var middleware = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(params, next) {
      var result, fetchFromPrisma, excludedCacheMethods, _excludedCacheMethods, excludedCacheMethodsInModels, cacheFunction;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            // This function is used by `async-cache-dedupe` to fetch data when the cache is empty
            fetchFromPrisma = /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                  while (1) switch (_context.prev = _context.next) {
                    case 0:
                      return _context.abrupt("return", next(params));
                    case 1:
                    case "end":
                      return _context.stop();
                  }
                }, _callee);
              }));
              return function fetchFromPrisma(_x3) {
                return _ref3.apply(this, arguments);
              };
            }(); // Do not cache any Prisma method specified in the defaultExcludeCacheMethods option
            excludedCacheMethods = defaultCacheMethods.filter(function (cacheMethod) {
              return excludeMethods.includes(cacheMethod);
            }); // Do not cache any Prisma method that has been excluded
            if (!(excludedCacheMethods != null && excludedCacheMethods.includes(params.action))) {
              // Add a cache function for each model specified in the models option
              models == null ? void 0 : models.forEach(function (_ref4) {
                var model = _ref4.model,
                  cacheTime = _ref4.cacheTime,
                  cacheKey = _ref4.cacheKey,
                  excludeMethods = _ref4.excludeMethods;
                // Only define the cache function for a model if it doesn't exist yet and hasn't been excluded
                if (!cache[model] && model === params.model && !(excludeModels != null && excludeModels.includes(params.model)) && !(excludeMethods != null && excludeMethods.includes(params.action))) {
                  cache.define(model, {
                    references: function references(_ref5, key) {
                      var params = _ref5.params;
                      return [(cacheKey || params.model) + "~" + key];
                    },
                    ttl: cacheTime || cacheOptions.ttl
                  }, /*#__PURE__*/function () {
                    var _modelsFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(_ref6) {
                      var cb, params;
                      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                        while (1) switch (_context2.prev = _context2.next) {
                          case 0:
                            cb = _ref6.cb, params = _ref6.params;
                            _context2.next = 3;
                            return cb(params);
                          case 3:
                            result = _context2.sent;
                            return _context2.abrupt("return", result);
                          case 5:
                          case "end":
                            return _context2.stop();
                        }
                      }, _callee2);
                    }));
                    function modelsFetch(_x4) {
                      return _modelsFetch.apply(this, arguments);
                    }
                    return modelsFetch;
                  }());
                }
              });
              // For each defined model in `models` we check if they defined any caching methods to be excluded
              excludedCacheMethodsInModels = models == null ? void 0 : models.find(function (_ref7) {
                var model = _ref7.model,
                  excludeMethods = _ref7.excludeMethods;
                return model === params.model && (excludeMethods == null ? void 0 : excludeMethods.length);
              }); // Do not define a cache function for any Prisma model if it already exists
              // Do not define the cache function for a model if it was excluded in `defaultExcludeCacheModels`
              // Do not define a cache function if the Prisma method was exluded in `models`
              if (!cache[params.model] && !(excludeModels != null && excludeModels.includes(params.model)) && !(excludedCacheMethodsInModels != null && (_excludedCacheMethods = excludedCacheMethodsInModels.excludeMethods) != null && _excludedCacheMethods.includes(params.action))) {
                cache.define(params.model, {
                  references: function references(_ref8, key) {
                    var params = _ref8.params;
                    return [params.model + "~" + key];
                  }
                }, /*#__PURE__*/function () {
                  var _modelFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(_ref9) {
                    var cb, params;
                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                      while (1) switch (_context3.prev = _context3.next) {
                        case 0:
                          cb = _ref9.cb, params = _ref9.params;
                          _context3.next = 3;
                          return cb(params);
                        case 3:
                          result = _context3.sent;
                          return _context3.abrupt("return", result);
                        case 5:
                        case "end":
                          return _context3.stop();
                      }
                    }, _callee3);
                  }));
                  function modelFetch(_x5) {
                    return _modelFetch.apply(this, arguments);
                  }
                  return modelFetch;
                }());
              }
            }
            // Get the cache function relating to the Prisma model
            cacheFunction = cache[params.model]; // Only cache the data if the Prisma model hasn't been excluded and if the Prisma method wasn't excluded either
            if (!(!(excludeModels != null && excludeModels.includes(params.model)) && !(excludedCacheMethods != null && excludedCacheMethods.includes(params.action)) && !(defaultMutationMethods != null && defaultMutationMethods.includes(params.action)) && typeof cacheFunction === "function")) {
              _context6.next = 19;
              break;
            }
            _context6.prev = 5;
            _context6.next = 8;
            return cacheFunction({
              cb: fetchFromPrisma,
              params: params
            });
          case 8:
            result = _context6.sent;
            _context6.next = 17;
            break;
          case 11:
            _context6.prev = 11;
            _context6.t0 = _context6["catch"](5);
            _context6.next = 15;
            return fetchFromPrisma(params);
          case 15:
            result = _context6.sent;
            console.error(_context6.t0);
          case 17:
            _context6.next = 27;
            break;
          case 19:
            _context6.next = 21;
            return fetchFromPrisma(params);
          case 21:
            result = _context6.sent;
            if (!defaultMutationMethods.includes(params.action)) {
              _context6.next = 27;
              break;
            }
            _context6.next = 25;
            return cache.invalidateAll("*" + params.model + "~*");
          case 25:
            _context6.next = 27;
            return Promise.all((models || []).filter(function (_ref10) {
              var model = _ref10.model;
              return model === params.model;
            }).map( /*#__PURE__*/function () {
              var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(_ref11) {
                var invalidateRelated;
                return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                  while (1) switch (_context5.prev = _context5.next) {
                    case 0:
                      invalidateRelated = _ref11.invalidateRelated;
                      if (!invalidateRelated) {
                        _context5.next = 4;
                        break;
                      }
                      _context5.next = 4;
                      return Promise.all(invalidateRelated.map( /*#__PURE__*/function () {
                        var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(relatedModel) {
                          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                            while (1) switch (_context4.prev = _context4.next) {
                              case 0:
                                return _context4.abrupt("return", cache.invalidateAll("*" + relatedModel + "~*"));
                              case 1:
                              case "end":
                                return _context4.stop();
                            }
                          }, _callee4);
                        }));
                        return function (_x7) {
                          return _ref13.apply(this, arguments);
                        };
                      }()));
                    case 4:
                    case "end":
                      return _context5.stop();
                  }
                }, _callee5);
              }));
              return function (_x6) {
                return _ref12.apply(this, arguments);
              };
            }()));
          case 27:
            return _context6.abrupt("return", result);
          case 28:
          case "end":
            return _context6.stop();
        }
      }, _callee6, null, [[5, 11]]);
    }));
    return function middleware(_x, _x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  return middleware;
};

exports.createPrismaRedisCache = createPrismaRedisCache;
//# sourceMappingURL=prisma-redis-middleware.cjs.development.js.map
