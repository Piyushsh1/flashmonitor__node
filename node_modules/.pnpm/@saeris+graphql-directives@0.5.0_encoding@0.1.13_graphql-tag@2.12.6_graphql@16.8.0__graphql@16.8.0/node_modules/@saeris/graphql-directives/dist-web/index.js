import { SchemaDirectiveVisitor } from 'apollo-server';
import { printSchema, GraphQLSchema, GraphQLEnumType, GraphQLDirective, DirectiveLocation, GraphQLString, defaultFieldResolver, GraphQLBoolean } from 'graphql';
import dinero from 'dinero.js';
import gql from 'graphql-tag';
import formatter from 'date-fns/format';
import numeral from 'numeral';
import { parsePhoneNumber } from 'libphonenumber-js';
import _camelCase from 'lodash/camelCase';
import _capitalize from 'lodash/capitalize';
import _deburr from 'lodash/deburr';
import _kebabCase from 'lodash/kebabCase';
import _lowerCase from 'lodash/lowerCase';
import _lowerFirst from 'lodash/lowerFirst';
import _snakeCase from 'lodash/snakeCase';
import _toLower from 'lodash/toLower';
import _toUpper from 'lodash/toUpper';
import _trim from 'lodash/trim';
import _upperCase from 'lodash/upperCase';
import _upperFirst from 'lodash/upperFirst';
import { unit } from 'mathjs';

const directiveToString = directive => printSchema(new GraphQLSchema({
  directives: Array.isArray(directive) ? directive : [directive]
}));
const directiveToDocumentNode = directive => gql(directiveToString(directive));

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
const RoundingMode = new GraphQLEnumType({
  name: `RoundingMode`,
  values: {
    HALF_ODD: {},
    HALF_EVEN: {},
    HALF_UP: {},
    HALF_DOWN: {},
    HALF_TOWARD_ZERO: {},
    HALF_AWAY_FROM_ZERO: {}
  }
});
class formatCurrency extends SchemaDirectiveVisitor {
  static getDirectiveDeclaration() {
    return new GraphQLDirective({
      name: `formatCurrency`,
      locations: [DirectiveLocation.FIELD_DEFINITION],
      args: {
        defaultFormat: {
          type: GraphQLString,
          defaultValue: `$0,0.00`
        },
        defaultRoundingMode: {
          type: RoundingMode,
          defaultValue: `HALF_AWAY_FROM_ZERO`
        }
      }
    });
  }

  static toString() {
    return directiveToString(this.getDirectiveDeclaration());
  }

  static toDocumentNode() {
    return directiveToDocumentNode(this.getDirectiveDeclaration());
  }

  visitFieldDefinition(field) {
    const {
      resolve = defaultFieldResolver
    } = field;
    const {
      defaultFormat,
      defaultRoundingMode
    } = this.args;
    field.args.push({
      name: `format`,
      type: GraphQLString
    });
    field.args.push({
      name: `currency`,
      type: GraphQLString
    });
    field.args.push({
      name: `roundingMode`,
      type: RoundingMode
    });

    field.resolve = async function (source, _ref, context, info) {
      let {
        format,
        currency,
        roundingMode
      } = _ref,
          args = _objectWithoutProperties(_ref, ["format", "currency", "roundingMode"]);

      const result = await resolve.call(this, source, args, context, info);

      const transform = input => {
        const config = {
          amount: input
        };
        if (currency) config.currency = currency;
        return dinero(config).toFormat(format || defaultFormat, roundingMode || defaultRoundingMode);
      };

      return Array.isArray(result) ? result.map(transform) : transform(result);
    };

    field.type = GraphQLString;
  }

}

var Currencies = /*#__PURE__*/Object.freeze({
  __proto__: null,
  formatCurrency: formatCurrency
});

function _objectWithoutProperties$1(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$1(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$1(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
class formatDate extends SchemaDirectiveVisitor {
  static getDirectiveDeclaration() {
    return new GraphQLDirective({
      name: `formatDate`,
      locations: [DirectiveLocation.FIELD_DEFINITION],
      args: {
        defaultFormat: {
          type: GraphQLString,
          defaultValue: `mmmm d, yyyy`
        }
      }
    });
  }

  static toString() {
    return directiveToString(this.getDirectiveDeclaration());
  }

  static toDocumentNode() {
    return directiveToDocumentNode(this.getDirectiveDeclaration());
  }

  visitFieldDefinition(field) {
    const {
      resolve = defaultFieldResolver
    } = field;
    const {
      defaultFormat
    } = this.args;
    field.args.push({
      name: `format`,
      type: GraphQLString
    });

    field.resolve = async function (source, _ref, context, info) {
      let {
        format
      } = _ref,
          args = _objectWithoutProperties$1(_ref, ["format"]);

      const result = await resolve.call(this, source, args, context, info);

      const transform = input => formatter(input, format || defaultFormat);

      return Array.isArray(result) ? result.map(transform) : transform(result);
    };

    field.type = GraphQLString;
  }

}

var Dates = /*#__PURE__*/Object.freeze({
  __proto__: null,
  formatDate: formatDate
});

function _objectWithoutProperties$2(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$2(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$2(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
class formatNumber extends SchemaDirectiveVisitor {
  static getDirectiveDeclaration() {
    return new GraphQLDirective({
      name: `formatNumber`,
      locations: [DirectiveLocation.FIELD_DEFINITION],
      args: {
        defaultFormat: {
          type: GraphQLString,
          defaultValue: `0,0.0000`
        }
      }
    });
  }

  static toString() {
    return directiveToString(this.getDirectiveDeclaration());
  }

  static toDocumentNode() {
    return directiveToDocumentNode(this.getDirectiveDeclaration());
  }

  visitFieldDefinition(field) {
    const {
      resolve = defaultFieldResolver
    } = field;
    const {
      defaultFormat
    } = this.args;
    field.args.push({
      name: `format`,
      type: GraphQLString
    });

    field.resolve = async function (source, _ref, context, info) {
      let {
        format
      } = _ref,
          args = _objectWithoutProperties$2(_ref, ["format"]);

      const result = await resolve.call(this, source, args, context, info);

      const transform = input => numeral(input).format(format || defaultFormat);

      return Array.isArray(result) ? result.map(transform) : transform(result);
    };

    field.type = GraphQLString;
  }

}

var Numbers = /*#__PURE__*/Object.freeze({
  __proto__: null,
  formatNumber: formatNumber
});

function _objectWithoutProperties$3(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$3(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$3(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
const PhoneFormats = new GraphQLEnumType({
  name: `PhoneFormats`,
  values: {
    National: {},
    International: {},
    E164: {},
    RFC3966: {}
  }
});
class formatPhoneNumber extends SchemaDirectiveVisitor {
  static getDirectiveDeclaration() {
    return new GraphQLDirective({
      name: `formatPhoneNumber`,
      locations: [DirectiveLocation.FIELD_DEFINITION],
      args: {
        defaultFormat: {
          type: PhoneFormats,
          defaultValue: `International`
        }
      }
    });
  }

  static toString() {
    return directiveToString(this.getDirectiveDeclaration());
  }

  static toDocumentNode() {
    return directiveToDocumentNode(this.getDirectiveDeclaration());
  }

  visitFieldDefinition(field) {
    const {
      resolve = defaultFieldResolver
    } = field;
    const {
      defaultFormat
    } = this.args;

    const getFormat = raw => raw === `E164` ? `E.164` : raw.toUpperCase();

    field.args.push({
      name: `format`,
      type: PhoneFormats
    });

    field.resolve = async function (source, _ref, context, info) {
      let {
        format
      } = _ref,
          args = _objectWithoutProperties$3(_ref, ["format"]);

      const result = await resolve.call(this, source, args, context, info);

      const transform = input => parsePhoneNumber(input).format(getFormat(format || defaultFormat));

      return Array.isArray(result) ? result.map(transform) : transform(result);
    };

    field.type = GraphQLString;
  }

}

var Phone = /*#__PURE__*/Object.freeze({
  __proto__: null,
  formatPhoneNumber: formatPhoneNumber
});

const methods = {
  camelCase: _camelCase,
  capitalize: _capitalize,
  deburr: _deburr,
  kebabCase: _kebabCase,
  lowerCase: _lowerCase,
  lowerFirst: _lowerFirst,
  snakeCase: _snakeCase,
  toLower: _toLower,
  toUpper: _toUpper,
  trim: _trim,
  upperCase: _upperCase,
  upperFirst: _upperFirst
};

class CreateStringDirective extends SchemaDirectiveVisitor {
  static getDirectiveDeclaration() {
    return new GraphQLDirective({
      name: this.name,
      locations: [DirectiveLocation.FIELD_DEFINITION]
    });
  }

  static toString() {
    return directiveToString(this.getDirectiveDeclaration());
  }

  static toDocumentNode() {
    return directiveToDocumentNode(this.getDirectiveDeclaration());
  }

  visitFieldDefinition(field) {
    const {
      resolve = defaultFieldResolver
    } = field;

    field.resolve = async function (...args) {
      const result = await resolve.apply(this, args);

      const transform = input => typeof input === `string` ? methods[this.name](input) : input;

      return Array.isArray(result) ? result.map(transform) : transform(result);
    };

    field.type = GraphQLString;
  }

}

class camelCase extends CreateStringDirective {}
class capitalize extends CreateStringDirective {}
class deburr extends CreateStringDirective {}
class kebabCase extends CreateStringDirective {}
class lowerCase extends CreateStringDirective {}
class lowerFirst extends CreateStringDirective {}
class snakeCase extends CreateStringDirective {}
class toLower extends CreateStringDirective {}
class toUpper extends CreateStringDirective {}
class trim extends CreateStringDirective {}
class upperCase extends CreateStringDirective {}
class upperFirst extends CreateStringDirective {}

var Strings = /*#__PURE__*/Object.freeze({
  __proto__: null,
  camelCase: camelCase,
  capitalize: capitalize,
  deburr: deburr,
  kebabCase: kebabCase,
  lowerCase: lowerCase,
  lowerFirst: lowerFirst,
  snakeCase: snakeCase,
  toLower: toLower,
  toUpper: toUpper,
  trim: trim,
  upperCase: upperCase,
  upperFirst: upperFirst
});

function _objectWithoutProperties$4(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose$4(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose$4(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class createUnitDirective extends SchemaDirectiveVisitor {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", ``);

    _defineProperty(this, "baseEnum", void 0);
  }

  static getDirectiveDeclaration() {
    return new GraphQLDirective({
      name: `convert${this._unit}`,
      locations: [DirectiveLocation.FIELD_DEFINITION],
      args: {
        originalUnit: {
          type: this._baseEnum
        },
        defaultRaw: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      }
    });
  }

  static toString() {
    return directiveToString(this.getDirectiveDeclaration());
  }

  static toDocumentNode() {
    return directiveToDocumentNode(this.getDirectiveDeclaration());
  }

  visitFieldDefinition(field) {
    const {
      resolve = defaultFieldResolver
    } = field;
    const {
      originalUnit,
      defaultRaw
    } = this.args;
    field.args.push({
      name: `convertTo`,
      type: this.baseEnum
    });
    field.args.push({
      name: `raw`,
      type: GraphQLBoolean
    });

    field.resolve = async function (source, _ref, context, info) {
      let {
        convertTo,
        raw
      } = _ref,
          args = _objectWithoutProperties$4(_ref, ["convertTo", "raw"]);

      const result = await resolve.call(this, source, args, context, info);

      const transform = input => {
        const value = unit(input, originalUnit).to(convertTo || originalUnit);
        return raw || defaultRaw ? value.toNumeric(convertTo || originalUnit) : value.toString();
      };

      return Array.isArray(result) ? result.map(transform) : transform(result);
    };

    field.type = GraphQLString;
  }

}

_defineProperty(createUnitDirective, "_unit", ``);

_defineProperty(createUnitDirective, "_baseEnum", void 0);

const decimalPrefixes = {
  deca: `da`,
  hecto: `h`,
  kilo: `k`,
  mega: `M`,
  giga: `G`,
  tera: `T`,
  peta: `P`,
  exa: `E`,
  zetta: `Z`,
  yotta: `Y`,
  "": ``,
  deci: `d`,
  centi: `c`,
  milli: `m`,
  miro: `u`,
  nano: `n`,
  pico: `p`,
  femto: `f`,
  atto: `a`,
  zpeto: `z`,
  yocto: `y`
};
const binaryPrefixes = {
  kibi: `Ki`,
  mebi: `Mi`,
  gibi: `Gi`,
  tebi: `Ti`,
  pebi: `Pi`,
  exi: `Ei`,
  zebi: `Zi`,
  yobi: `Yi`,
  "": ``,
  kilo: `k`,
  mega: `M`,
  giga: `G`,
  tera: `T`,
  peta: `P`,
  exa: `E`,
  zetta: `Z`,
  yotta: `Y`
};

const applyPrefixes = (arr, unitName) => arr.map(prefix => `${prefix}${unitName}`);

const generatePrefixes = (normalPrefixes, abbreviationPrefixes) => (singular, plural, abbreviation) => [...applyPrefixes(normalPrefixes, singular), ...applyPrefixes(normalPrefixes, plural), ...applyPrefixes(abbreviationPrefixes, abbreviation)].join(`\n`);

const generateDecimalPrefixes = generatePrefixes(Object.keys(decimalPrefixes), Object.values(decimalPrefixes));
const generateBinaryPrefixes = generatePrefixes(Object.keys(binaryPrefixes), Object.values(binaryPrefixes));

const createEnum = (name, values) => new GraphQLEnumType({
  name,
  values: values.reduce((hash, key) => {
    hash[key] = {};
    return hash;
  }, {})
});

const LengthTypesEnum = createEnum(`LengthTypesEnum`, [...generateDecimalPrefixes(`meter`, `meters`, `m`), `inch`, `inches`, `in`, `foot`, `feet`, `ft`, `yard`, `yards`, `yd`, `mile`, `miles`, `mi`, `link`, `links`, `li`, `rod`, `rods`, `rd`, `chain`, `chains`, `ch`, `angstrom`, `angstroms`, `mil`, `mils`]);
class convertLength extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Length`);

    _defineProperty(this, "baseEnum", LengthTypesEnum);
  }

}

_defineProperty(convertLength, "_unit", `Length`);

_defineProperty(convertLength, "_baseEnum", LengthTypesEnum);

const SurfaceAreaTypesEnum = createEnum(`SurfaceAreaTypesEnum`, [`m2`, `sqin`, `sqft`, `sqyd`, `sqmi`, `sqrd`, `sqch`, `sqmil`, `acre`, `acres`, `hectare`, `hectares`]);
class convertSurfaceArea extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `SurfaceArea`);

    _defineProperty(this, "baseEnum", SurfaceAreaTypesEnum);
  }

}

_defineProperty(convertSurfaceArea, "_unit", `SurfaceArea`);

_defineProperty(convertSurfaceArea, "_baseEnum", SurfaceAreaTypesEnum);

const VolumeTypesEnum = createEnum(`VolumeTypesEnum`, [`m3`, ...generateDecimalPrefixes(`litre`, `litres`, `L`), `cc`, `cuin`, `cuft`, `cuyd`, `teaspoon`, `teaspoons`, `tablespoon`, `tablespoons`]);
class convertVolume extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Volume`);

    _defineProperty(this, "baseEnum", VolumeTypesEnum);
  }

}

_defineProperty(convertVolume, "_unit", `Volume`);

_defineProperty(convertVolume, "_baseEnum", VolumeTypesEnum);

const LiquidVolumeTypesEnum = createEnum(`LiquidVolumeTypesEnum`, [`minim`, `min`, `fluiddram`, `fldr`, `fluidounce`, `floz`, `gill`, `gi`, `cup`, `cups`, `cp`, `pint`, `pints`, `pt`, `quart`, `quarts`, `qt`, `gallon`, `gallons`, `gal`, `beerbarrel`, `beerbarrels`, `bbl`, `oilbarrel`, `oilbarrels`, `obl`, `hogshead`, `drop`, `gtt`]);
class convertLiquidVolume extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `LiquidVolume`);

    _defineProperty(this, "baseEnum", LiquidVolumeTypesEnum);
  }

}

_defineProperty(convertLiquidVolume, "_unit", `LiquidVolume`);

_defineProperty(convertLiquidVolume, "_baseEnum", LiquidVolumeTypesEnum);

const AngleTypesEnum = createEnum(`AngleTypesEnum`, [...generateDecimalPrefixes(`radian`, `radians`, `rad`), ...generateDecimalPrefixes(`degree`, `degrees`, `deg`), ...generateDecimalPrefixes(`gradian`, `gradians`, `grad`), `cycle`, `arcsec`, `arcsecond`, `arcseconds`, `arcmin`, `arcminute`, `arcminutes`]);
class convertAngle extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Angle`);

    _defineProperty(this, "baseEnum", AngleTypesEnum);
  }

}

_defineProperty(convertAngle, "_unit", `Angle`);

_defineProperty(convertAngle, "_baseEnum", AngleTypesEnum);

const TimeTypesEnum = createEnum(`TimeTypesEnum`, [`s`, `sec`, `secs`, `second`, `seconds`, `mins`, `minute`, `minutes`, `h`, `hr`, `hrs`, `hour`, `hours`, `day`, `days`, `week`, `weeks`, `month`, `months`, `year`, `years`, `decade`, `decades`, `century`, `centuries`, `millennium`, `millennia`]);
class convertTime extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Time`);

    _defineProperty(this, "baseEnum", TimeTypesEnum);
  }

}

_defineProperty(convertTime, "_unit", `Time`);

_defineProperty(convertTime, "_baseEnum", TimeTypesEnum);

const MassTypesEnum = createEnum(`MassTypesEnum`, [...generateDecimalPrefixes(`gram`, `grams`, `g`), ...generateDecimalPrefixes(`tonne`, `tonnes`, `t`), `ton`, `grain`, `gr`, `dram`, `dr`, `ounce`, `oz`, `poundmass`, `lbm`, `lb`, `lbs`, `hundredweight`, `cwt`, `stick`, `stone`]);
class convertMass extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Mass`);

    _defineProperty(this, "baseEnum", MassTypesEnum);
  }

}

_defineProperty(convertMass, "_unit", `Mass`);

_defineProperty(convertMass, "_baseEnum", MassTypesEnum);

const TemperatureTypesEnum = createEnum(`TemperatureTypesEnum`, [`kelvin`, `K`, `celsius`, `degC`, `fahrenheit`, `degF`, `rankine`, `degR`]);
class convertTemperature extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Temperature`);

    _defineProperty(this, "baseEnum", TemperatureTypesEnum);
  }

}

_defineProperty(convertTemperature, "_unit", `Temperature`);

_defineProperty(convertTemperature, "_baseEnum", TemperatureTypesEnum);

const ForceTypesEnum = createEnum(`ForceTypesEnum`, [...generateDecimalPrefixes(`newton`, `newtons`, `N`), ...generateDecimalPrefixes(`dyne`, `dynes`, `dyn`), `poundforce`, `lbf`, `kip`]);
class convertForce extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Force`);

    _defineProperty(this, "baseEnum", ForceTypesEnum);
  }

}

_defineProperty(convertForce, "_unit", `Force`);

_defineProperty(convertForce, "_baseEnum", ForceTypesEnum);

const EnergyTypesEnum = createEnum(`EnergyTypesEnum`, [`joule`, `J`, `erg`, `Wh`, `BTU`, ...generateDecimalPrefixes(`electronvolt`, `electronvolts`, `eV`)]);
class convertEnergy extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Energy`);

    _defineProperty(this, "baseEnum", EnergyTypesEnum);
  }

}

_defineProperty(convertEnergy, "_unit", `Energy`);

_defineProperty(convertEnergy, "_baseEnum", EnergyTypesEnum);

const PowerTypesEnum = createEnum(`PowerTypesEnum`, [...generateDecimalPrefixes(`watt`, `watts`, `W`), `hp`]);
class convertPower extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Power`);

    _defineProperty(this, "baseEnum", PowerTypesEnum);
  }

}

_defineProperty(convertPower, "_unit", `Power`);

_defineProperty(convertPower, "_baseEnum", PowerTypesEnum);

const PressureTypesEnum = createEnum(`PressureTypesEnum`, [`Pa`, `psi`, `atm`, `torr`, `bar`, `mmHg`, `mmH2O`, `cmH2O`]);
class convertPressure extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Pressure`);

    _defineProperty(this, "baseEnum", PressureTypesEnum);
  }

}

_defineProperty(convertPressure, "_unit", `Pressure`);

_defineProperty(convertPressure, "_baseEnum", PressureTypesEnum);

const ElectroMagneticForceTypesEnum = createEnum(`ElectroMagneticForceTypesEnum`, [...generateDecimalPrefixes(`coulomb`, `coulombs`, `C`), ...generateDecimalPrefixes(`watt`, `watts`, `W`), ...generateDecimalPrefixes(`farad`, `farads`, `F`), ...generateDecimalPrefixes(`volt`, `volts`, `V`), ...generateDecimalPrefixes(`henry`, `henrys`, `H`), ...generateDecimalPrefixes(`weber`, `webers`, `Wb`), ...generateDecimalPrefixes(`tesla`, `teslas`, `T`), ...generateDecimalPrefixes(`electronvolt`, `electronvolts`, `eV`), ...generateDecimalPrefixes(`ampere`, `amperes`, `A`), `ohm`, `siemens`]);
class convertElectroMagneticForce extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `ElectroMagneticForce`);

    _defineProperty(this, "baseEnum", ElectroMagneticForceTypesEnum);
  }

}

_defineProperty(convertElectroMagneticForce, "_unit", `ElectroMagneticForce`);

_defineProperty(convertElectroMagneticForce, "_baseEnum", ElectroMagneticForceTypesEnum);

const BinaryTypesEnum = createEnum(`BinaryTypesEnum`, [...generateBinaryPrefixes(`bit`, `bits`, `b`), ...generateBinaryPrefixes(`byte`, `bytes`, `B`)]);
class convertBinary extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Binary`);

    _defineProperty(this, "baseEnum", BinaryTypesEnum);
  }

}

_defineProperty(convertBinary, "_unit", `Binary`);

_defineProperty(convertBinary, "_baseEnum", BinaryTypesEnum);

var Units = /*#__PURE__*/Object.freeze({
  __proto__: null,
  convertLength: convertLength,
  convertSurfaceArea: convertSurfaceArea,
  convertVolume: convertVolume,
  convertLiquidVolume: convertLiquidVolume,
  convertAngle: convertAngle,
  convertTime: convertTime,
  convertMass: convertMass,
  convertTemperature: convertTemperature,
  convertForce: convertForce,
  convertEnergy: convertEnergy,
  convertPower: convertPower,
  convertPressure: convertPressure,
  convertElectroMagneticForce: convertElectroMagneticForce,
  convertBinary: convertBinary
});

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const schemaDirectives = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, Currencies), Dates), Numbers), Phone), Strings), Units);

export default schemaDirectives;
export { Currencies, Dates, Numbers, Phone, Strings, Units, camelCase, capitalize, convertAngle, convertBinary, convertElectroMagneticForce, convertEnergy, convertForce, convertLength, convertLiquidVolume, convertMass, convertPower, convertPressure, convertSurfaceArea, convertTemperature, convertTime, convertVolume, deburr, formatCurrency, formatDate, formatNumber, formatPhoneNumber, kebabCase, lowerCase, lowerFirst, snakeCase, toLower, toUpper, trim, upperCase, upperFirst };
//# sourceMappingURL=index.js.map
