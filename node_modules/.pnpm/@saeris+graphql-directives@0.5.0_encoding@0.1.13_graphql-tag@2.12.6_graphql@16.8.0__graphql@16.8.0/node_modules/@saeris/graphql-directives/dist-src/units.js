function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { SchemaDirectiveVisitor } from "apollo-server";
import { defaultFieldResolver, GraphQLDirective, DirectiveLocation, GraphQLString, GraphQLBoolean, GraphQLEnumType } from "graphql";
import { unit } from "mathjs";
import { directiveToString, directiveToDocumentNode } from "./utils.js";

class createUnitDirective extends SchemaDirectiveVisitor {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", ``);

    _defineProperty(this, "baseEnum", void 0);
  }

  static getDirectiveDeclaration() {
    return new GraphQLDirective({
      name: `convert${this._unit}`,
      locations: [DirectiveLocation.FIELD_DEFINITION],
      args: {
        originalUnit: {
          type: this._baseEnum
        },
        defaultRaw: {
          type: GraphQLBoolean,
          defaultValue: false
        }
      }
    });
  }

  static toString() {
    return directiveToString(this.getDirectiveDeclaration());
  }

  static toDocumentNode() {
    return directiveToDocumentNode(this.getDirectiveDeclaration());
  }

  visitFieldDefinition(field) {
    const {
      resolve = defaultFieldResolver
    } = field;
    const {
      originalUnit,
      defaultRaw
    } = this.args;
    field.args.push({
      name: `convertTo`,
      type: this.baseEnum
    });
    field.args.push({
      name: `raw`,
      type: GraphQLBoolean
    });

    field.resolve = async function (source, _ref, context, info) {
      let {
        convertTo,
        raw
      } = _ref,
          args = _objectWithoutProperties(_ref, ["convertTo", "raw"]);

      const result = await resolve.call(this, source, args, context, info);

      const transform = input => {
        const value = unit(input, originalUnit).to(convertTo || originalUnit);
        return raw || defaultRaw ? value.toNumeric(convertTo || originalUnit) : value.toString();
      };

      return Array.isArray(result) ? result.map(transform) : transform(result);
    };

    field.type = GraphQLString;
  }

}

_defineProperty(createUnitDirective, "_unit", ``);

_defineProperty(createUnitDirective, "_baseEnum", void 0);

const decimalPrefixes = {
  deca: `da`,
  hecto: `h`,
  kilo: `k`,
  mega: `M`,
  giga: `G`,
  tera: `T`,
  peta: `P`,
  exa: `E`,
  zetta: `Z`,
  yotta: `Y`,
  "": ``,
  deci: `d`,
  centi: `c`,
  milli: `m`,
  miro: `u`,
  nano: `n`,
  pico: `p`,
  femto: `f`,
  atto: `a`,
  zpeto: `z`,
  yocto: `y`
};
const binaryPrefixes = {
  kibi: `Ki`,
  mebi: `Mi`,
  gibi: `Gi`,
  tebi: `Ti`,
  pebi: `Pi`,
  exi: `Ei`,
  zebi: `Zi`,
  yobi: `Yi`,
  "": ``,
  kilo: `k`,
  mega: `M`,
  giga: `G`,
  tera: `T`,
  peta: `P`,
  exa: `E`,
  zetta: `Z`,
  yotta: `Y`
};

const applyPrefixes = (arr, unitName) => arr.map(prefix => `${prefix}${unitName}`);

const generatePrefixes = (normalPrefixes, abbreviationPrefixes) => (singular, plural, abbreviation) => [...applyPrefixes(normalPrefixes, singular), ...applyPrefixes(normalPrefixes, plural), ...applyPrefixes(abbreviationPrefixes, abbreviation)].join(`\n`);

const generateDecimalPrefixes = generatePrefixes(Object.keys(decimalPrefixes), Object.values(decimalPrefixes));
const generateBinaryPrefixes = generatePrefixes(Object.keys(binaryPrefixes), Object.values(binaryPrefixes));

const createEnum = (name, values) => new GraphQLEnumType({
  name,
  values: values.reduce((hash, key) => {
    hash[key] = {};
    return hash;
  }, {})
});

const LengthTypesEnum = createEnum(`LengthTypesEnum`, [...generateDecimalPrefixes(`meter`, `meters`, `m`), `inch`, `inches`, `in`, `foot`, `feet`, `ft`, `yard`, `yards`, `yd`, `mile`, `miles`, `mi`, `link`, `links`, `li`, `rod`, `rods`, `rd`, `chain`, `chains`, `ch`, `angstrom`, `angstroms`, `mil`, `mils`]);
export class convertLength extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Length`);

    _defineProperty(this, "baseEnum", LengthTypesEnum);
  }

}

_defineProperty(convertLength, "_unit", `Length`);

_defineProperty(convertLength, "_baseEnum", LengthTypesEnum);

const SurfaceAreaTypesEnum = createEnum(`SurfaceAreaTypesEnum`, [`m2`, `sqin`, `sqft`, `sqyd`, `sqmi`, `sqrd`, `sqch`, `sqmil`, `acre`, `acres`, `hectare`, `hectares`]);
export class convertSurfaceArea extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `SurfaceArea`);

    _defineProperty(this, "baseEnum", SurfaceAreaTypesEnum);
  }

}

_defineProperty(convertSurfaceArea, "_unit", `SurfaceArea`);

_defineProperty(convertSurfaceArea, "_baseEnum", SurfaceAreaTypesEnum);

const VolumeTypesEnum = createEnum(`VolumeTypesEnum`, [`m3`, ...generateDecimalPrefixes(`litre`, `litres`, `L`), `cc`, `cuin`, `cuft`, `cuyd`, `teaspoon`, `teaspoons`, `tablespoon`, `tablespoons`]);
export class convertVolume extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Volume`);

    _defineProperty(this, "baseEnum", VolumeTypesEnum);
  }

}

_defineProperty(convertVolume, "_unit", `Volume`);

_defineProperty(convertVolume, "_baseEnum", VolumeTypesEnum);

const LiquidVolumeTypesEnum = createEnum(`LiquidVolumeTypesEnum`, [`minim`, `min`, `fluiddram`, `fldr`, `fluidounce`, `floz`, `gill`, `gi`, `cup`, `cups`, `cp`, `pint`, `pints`, `pt`, `quart`, `quarts`, `qt`, `gallon`, `gallons`, `gal`, `beerbarrel`, `beerbarrels`, `bbl`, `oilbarrel`, `oilbarrels`, `obl`, `hogshead`, `drop`, `gtt`]);
export class convertLiquidVolume extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `LiquidVolume`);

    _defineProperty(this, "baseEnum", LiquidVolumeTypesEnum);
  }

}

_defineProperty(convertLiquidVolume, "_unit", `LiquidVolume`);

_defineProperty(convertLiquidVolume, "_baseEnum", LiquidVolumeTypesEnum);

const AngleTypesEnum = createEnum(`AngleTypesEnum`, [...generateDecimalPrefixes(`radian`, `radians`, `rad`), ...generateDecimalPrefixes(`degree`, `degrees`, `deg`), ...generateDecimalPrefixes(`gradian`, `gradians`, `grad`), `cycle`, `arcsec`, `arcsecond`, `arcseconds`, `arcmin`, `arcminute`, `arcminutes`]);
export class convertAngle extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Angle`);

    _defineProperty(this, "baseEnum", AngleTypesEnum);
  }

}

_defineProperty(convertAngle, "_unit", `Angle`);

_defineProperty(convertAngle, "_baseEnum", AngleTypesEnum);

const TimeTypesEnum = createEnum(`TimeTypesEnum`, [`s`, `sec`, `secs`, `second`, `seconds`, `mins`, `minute`, `minutes`, `h`, `hr`, `hrs`, `hour`, `hours`, `day`, `days`, `week`, `weeks`, `month`, `months`, `year`, `years`, `decade`, `decades`, `century`, `centuries`, `millennium`, `millennia`]);
export class convertTime extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Time`);

    _defineProperty(this, "baseEnum", TimeTypesEnum);
  }

}

_defineProperty(convertTime, "_unit", `Time`);

_defineProperty(convertTime, "_baseEnum", TimeTypesEnum);

const MassTypesEnum = createEnum(`MassTypesEnum`, [...generateDecimalPrefixes(`gram`, `grams`, `g`), ...generateDecimalPrefixes(`tonne`, `tonnes`, `t`), `ton`, `grain`, `gr`, `dram`, `dr`, `ounce`, `oz`, `poundmass`, `lbm`, `lb`, `lbs`, `hundredweight`, `cwt`, `stick`, `stone`]);
export class convertMass extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Mass`);

    _defineProperty(this, "baseEnum", MassTypesEnum);
  }

}

_defineProperty(convertMass, "_unit", `Mass`);

_defineProperty(convertMass, "_baseEnum", MassTypesEnum);

const TemperatureTypesEnum = createEnum(`TemperatureTypesEnum`, [`kelvin`, `K`, `celsius`, `degC`, `fahrenheit`, `degF`, `rankine`, `degR`]);
export class convertTemperature extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Temperature`);

    _defineProperty(this, "baseEnum", TemperatureTypesEnum);
  }

}

_defineProperty(convertTemperature, "_unit", `Temperature`);

_defineProperty(convertTemperature, "_baseEnum", TemperatureTypesEnum);

const ForceTypesEnum = createEnum(`ForceTypesEnum`, [...generateDecimalPrefixes(`newton`, `newtons`, `N`), ...generateDecimalPrefixes(`dyne`, `dynes`, `dyn`), `poundforce`, `lbf`, `kip`]);
export class convertForce extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Force`);

    _defineProperty(this, "baseEnum", ForceTypesEnum);
  }

}

_defineProperty(convertForce, "_unit", `Force`);

_defineProperty(convertForce, "_baseEnum", ForceTypesEnum);

const EnergyTypesEnum = createEnum(`EnergyTypesEnum`, [`joule`, `J`, `erg`, `Wh`, `BTU`, ...generateDecimalPrefixes(`electronvolt`, `electronvolts`, `eV`)]);
export class convertEnergy extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Energy`);

    _defineProperty(this, "baseEnum", EnergyTypesEnum);
  }

}

_defineProperty(convertEnergy, "_unit", `Energy`);

_defineProperty(convertEnergy, "_baseEnum", EnergyTypesEnum);

const PowerTypesEnum = createEnum(`PowerTypesEnum`, [...generateDecimalPrefixes(`watt`, `watts`, `W`), `hp`]);
export class convertPower extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Power`);

    _defineProperty(this, "baseEnum", PowerTypesEnum);
  }

}

_defineProperty(convertPower, "_unit", `Power`);

_defineProperty(convertPower, "_baseEnum", PowerTypesEnum);

const PressureTypesEnum = createEnum(`PressureTypesEnum`, [`Pa`, `psi`, `atm`, `torr`, `bar`, `mmHg`, `mmH2O`, `cmH2O`]);
export class convertPressure extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Pressure`);

    _defineProperty(this, "baseEnum", PressureTypesEnum);
  }

}

_defineProperty(convertPressure, "_unit", `Pressure`);

_defineProperty(convertPressure, "_baseEnum", PressureTypesEnum);

const ElectroMagneticForceTypesEnum = createEnum(`ElectroMagneticForceTypesEnum`, [...generateDecimalPrefixes(`coulomb`, `coulombs`, `C`), ...generateDecimalPrefixes(`watt`, `watts`, `W`), ...generateDecimalPrefixes(`farad`, `farads`, `F`), ...generateDecimalPrefixes(`volt`, `volts`, `V`), ...generateDecimalPrefixes(`henry`, `henrys`, `H`), ...generateDecimalPrefixes(`weber`, `webers`, `Wb`), ...generateDecimalPrefixes(`tesla`, `teslas`, `T`), ...generateDecimalPrefixes(`electronvolt`, `electronvolts`, `eV`), ...generateDecimalPrefixes(`ampere`, `amperes`, `A`), `ohm`, `siemens`]);
export class convertElectroMagneticForce extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `ElectroMagneticForce`);

    _defineProperty(this, "baseEnum", ElectroMagneticForceTypesEnum);
  }

}

_defineProperty(convertElectroMagneticForce, "_unit", `ElectroMagneticForce`);

_defineProperty(convertElectroMagneticForce, "_baseEnum", ElectroMagneticForceTypesEnum);

const BinaryTypesEnum = createEnum(`BinaryTypesEnum`, [...generateBinaryPrefixes(`bit`, `bits`, `b`), ...generateBinaryPrefixes(`byte`, `bytes`, `B`)]);
export class convertBinary extends createUnitDirective {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "unit", `Binary`);

    _defineProperty(this, "baseEnum", BinaryTypesEnum);
  }

}

_defineProperty(convertBinary, "_unit", `Binary`);

_defineProperty(convertBinary, "_baseEnum", BinaryTypesEnum);