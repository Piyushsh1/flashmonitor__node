import { GraphQLScalarType } from "graphql";
export class MaxLength extends GraphQLScalarType {
  constructor(type, limit) {
    super({
      name: `MaxLength${limit}`,

      serialize(value) {
        var _type$serialize;

        const serialized = type === null || type === void 0 ? void 0 : (_type$serialize = type.serialize) === null || _type$serialize === void 0 ? void 0 : _type$serialize.call(type, value);

        if (typeof value === `string` && value.length <= limit) {
          return serialized;
        }

        if (typeof value === `number` && !isNaN(value) && value <= limit) {
          return serialized;
        }

        throw new TypeError(`Value exceeds limit: ${limit}`);
      },

      parseValue(value) {
        var _type$parseValue;

        return (_type$parseValue = type.parseValue) === null || _type$parseValue === void 0 ? void 0 : _type$parseValue.call(type, value);
      },

      parseLiteral(ast) {
        var _type$parseLiteral;

        return (_type$parseLiteral = type.parseLiteral) === null || _type$parseLiteral === void 0 ? void 0 : _type$parseLiteral.call(type, ast, {});
      }

    });
  }

}
export class MinLength extends GraphQLScalarType {
  constructor(type, limit) {
    super({
      name: `MinLength${limit}`,

      serialize(value) {
        var _type$serialize2;

        const serialized = type === null || type === void 0 ? void 0 : (_type$serialize2 = type.serialize) === null || _type$serialize2 === void 0 ? void 0 : _type$serialize2.call(type, value);

        if (typeof value === `string` && value.length >= limit) {
          return serialized;
        }

        if (typeof value === `number` && !isNaN(value) && value >= limit) {
          return serialized;
        }

        throw new TypeError(`Value beneath limit: ${limit}`);
      },

      parseValue(value) {
        var _type$parseValue2;

        return (_type$parseValue2 = type.parseValue) === null || _type$parseValue2 === void 0 ? void 0 : _type$parseValue2.call(type, value);
      },

      parseLiteral(ast) {
        var _type$parseLiteral2;

        return (_type$parseLiteral2 = type.parseLiteral) === null || _type$parseLiteral2 === void 0 ? void 0 : _type$parseLiteral2.call(type, ast, {});
      }

    });
  }

}
export class GreaterThan extends GraphQLScalarType {
  constructor(type, limit) {
    super({
      name: `GreaterThan${limit}`,

      serialize(value) {
        var _type$serialize3;

        const serialized = type === null || type === void 0 ? void 0 : (_type$serialize3 = type.serialize) === null || _type$serialize3 === void 0 ? void 0 : _type$serialize3.call(type, value);

        if (typeof value === `number` && !isNaN(value) && value > limit) {
          return serialized;
        }

        throw new TypeError(`Value beneath limit: ${limit}`);
      },

      parseValue(value) {
        var _type$parseValue3;

        return (_type$parseValue3 = type.parseValue) === null || _type$parseValue3 === void 0 ? void 0 : _type$parseValue3.call(type, value);
      },

      parseLiteral(ast) {
        var _type$parseLiteral3;

        return (_type$parseLiteral3 = type.parseLiteral) === null || _type$parseLiteral3 === void 0 ? void 0 : _type$parseLiteral3.call(type, ast, {});
      }

    });
  }

}
export class LessThan extends GraphQLScalarType {
  constructor(type, limit) {
    super({
      name: `LessThan${limit}`,

      serialize(value) {
        var _type$serialize4;

        const serialized = type === null || type === void 0 ? void 0 : (_type$serialize4 = type.serialize) === null || _type$serialize4 === void 0 ? void 0 : _type$serialize4.call(type, value);

        if (typeof value === `number` && !isNaN(value) && value < limit) {
          return serialized;
        }

        throw new TypeError(`Value exceeds limit: ${limit}`);
      },

      parseValue(value) {
        var _type$parseValue4;

        return (_type$parseValue4 = type.parseValue) === null || _type$parseValue4 === void 0 ? void 0 : _type$parseValue4.call(type, value);
      },

      parseLiteral(ast) {
        var _type$parseLiteral4;

        return (_type$parseLiteral4 = type.parseLiteral) === null || _type$parseLiteral4 === void 0 ? void 0 : _type$parseLiteral4.call(type, ast, {});
      }

    });
  }

}