function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { SchemaDirectiveVisitor } from "apollo-server";
import { defaultFieldResolver, GraphQLDirective, DirectiveLocation, GraphQLString } from "graphql";
import numeral from "numeral";
import { directiveToString, directiveToDocumentNode } from "./utils.js";
export class formatNumber extends SchemaDirectiveVisitor {
  static getDirectiveDeclaration() {
    return new GraphQLDirective({
      name: `formatNumber`,
      locations: [DirectiveLocation.FIELD_DEFINITION],
      args: {
        defaultFormat: {
          type: GraphQLString,
          defaultValue: `0,0.0000`
        }
      }
    });
  }

  static toString() {
    return directiveToString(this.getDirectiveDeclaration());
  }

  static toDocumentNode() {
    return directiveToDocumentNode(this.getDirectiveDeclaration());
  }

  visitFieldDefinition(field) {
    const {
      resolve = defaultFieldResolver
    } = field;
    const {
      defaultFormat
    } = this.args;
    field.args.push({
      name: `format`,
      type: GraphQLString
    });

    field.resolve = async function (source, _ref, context, info) {
      let {
        format
      } = _ref,
          args = _objectWithoutProperties(_ref, ["format"]);

      const result = await resolve.call(this, source, args, context, info);

      const transform = input => numeral(input).format(format || defaultFormat);

      return Array.isArray(result) ? result.map(transform) : transform(result);
    };

    field.type = GraphQLString;
  }

}